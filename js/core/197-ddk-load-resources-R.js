// initial population of global keyword hashK(DDK_KEYWORDS);DDK.template = DDK.template || {};DDK.template.menuItem = function (records, root, title) {	return '<li><a href="#">' + title + '</a></li>';};DDK.loadResources = function () {	var widgets = DDK_CONFIG && DDK_CONFIG.widget || {},		links = DDK_CONFIG && DDK_CONFIG.link && DDK_CONFIG.link.js && DDK_CONFIG.link.js.split(DDK.regex.delimiter) || [],		headerEnabled = true,		dataConfig, url;	// check header.enabled status	if (DDK_CONFIG && DDK_CONFIG.header && DDK_CONFIG.header.enabled === false) {		headerEnabled = false;	}		// if no page content is specified (via widgets or links)	// load the demo page for the Responsive Template	if (!(widgets.css || widgets.content || widgets.js || links.css || links.js)) {		widgets.content = DDK_CONFIG.widget.content = "DDK2_Responsive_Template_Demo";	}		// add plugins script to start of links list	links.unshift('resources/ddk/' + DDK_PATH + '/js/ddk2-plugins-responsive-' + DDK_BUILD + DDK_MIN + '.js');		// there will always be a content widget once the default page is created	dataConfig = [		{ widget: "PSC_CWP_Templates" },		headerEnabled ? { widget: widgets.header || "DDK2_Responsive_Template_Header" } : null,				/*		{ queryWidget: "DDK2_Favorites_Tree_Query", queryHeaderWidget: "DDK2_Favorites_Tree_Query_Header", keywords: { p_fcat_list: "'PS_HOME_PAGE_APPS','PS_HOME_PAGE_LINKS','PS_HOME_PAGE_TOOLS'" }, useRecordObjects: true, columnPrefix: "sci_fav_" },		*/				widgets.css ? { widget: widgets.css } : null,		widgets.js ? { widget: widgets.js } : null,		widgets.content ? { widget: widgets.content } : null	];	url = "amengine.aspx?config.mn=DDK_Data_Request&data.config=" + 		DDK.escape.brackets(JSON.stringify(dataConfig));		$.ajax({		url: url,		dataType: "json",		type: "POST",		// send the global keyword hash		// except sec.* keywords		data: K.toRequestData(),		success: function (data) {			var datasets = data && data.datasets,				templates = datasets && datasets[0],				header = datasets && datasets[1],				css = datasets && datasets[2],				js = datasets && datasets[3],				content = datasets && datasets[4],				$loading = $("#loading"),				$loadingCSS = $("#loading_css"),				$loadingMask = $("#loading_mask");			// defer rendering of the content			// until the plugins script and all other linked scripts are loaded			$.when.apply(null, _.map(links, function (link) { return $.loadScript(link); })).done(function () {				var $body = $("body"),					$head = $("head"),					$topbar,					$offCanvas,					$offCanvasLists,					$offCanvasDropdownItems;								// cache template functions					if (templates) {					$(templates).each(function (index, element) {						var $element = $(element),							templateName						if (element.id && _.string.startsWith(element.id, "template_")) {							templateName = _.string.camelize(element.id.replace("template_", ""));							PS.templateCache[templateName] = _.template($element.html());						}					});				}				if (css) {					$head.append("<style>" + DDK.unescape.brackets(css) + "</style>");				}				if (content) {					// add content to the body					// so it shows up under the loading mask					$(PS.templateCache[(headerEnabled && header) ? "responsive" : "responsiveNoHeader"]({						content: DDK.unescape.brackets(content),						title: DDK_TITLE,						header: header ? DDK.unescape.brackets(header) : ""					})).prependTo($body);				}								// setup top-bar				$topbar = $(".inner-wrap > [id^='psc_list_'] nav.top-bar").addClass("show-for-large-up");								// setup off-canvas menu				$offCanvas = $(".left-off-canvas-menu");								// adjust classes and html structure from top-bar style				$offCanvasLists = $offCanvas.find("ul.left, ul.right")								$offCanvasLists.removeClass("left right")					.addClass("off-canvas-list")					.replaceAll($offCanvas.find(".top-bar"));									$offCanvasDropdownItems = $offCanvasLists.find(".list-item.has-dropdown");								// setup expandable sections				$offCanvasDropdownItems.children("a").click(function (e) {					// prevent following anchor and closing off-canvas					e.preventDefault();					e.stopPropagation();										// hide nested lists					$(this).parent().toggleClass("closed open").end().siblings("ul").slideToggle();				});								$offCanvasDropdownItems.addClass("closed").children("ul").hide();								// initialize Foundation				$(document).foundation();												// fire DDK.defer callbacks to initialize content				DDK.resourcesLoad.resolve();								// append js and execute				if (js) {					$body.append("<script>" + DDK.unescape.brackets(js) + "</script>");				}								// initialize DDK Controls that were part of the initial content load				// this needs to come after all developer-included JavaScript is executed				// so that Control customInit functions and other Control configuration				// may be set				$(document).findControls().initControls();								// initialize Prism.js syntax highlighting				Prism && Prism.highlightAll();								// fade out loading message				$loading.fadeOut(300, function () {					$loading.remove();					$loadingCSS.remove();										// then fade out mask (fade in content					$loadingMask.fadeOut(300, function () {						$loadingMask.remove();					});				});			});		}	});};DDK.loadResources();