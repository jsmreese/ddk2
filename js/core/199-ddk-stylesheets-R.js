DDK.initStylesheets = function () {	var $window, $document, range, sizes, sheets, viewportHeight, ruleHeights, addRules, currentSize;	sizes = "small medium large xlarge xxlarge".split(" ");		DDK.styleSheets = sheets = {};		_.each(sizes, function (size) {		sheets[size] = $.createStylesheet(Foundation.media_queries[size]);	});		DDK.screenSize = function () {		return _.findLast(sizes, function (size) {			return matchMedia(Foundation.media_queries[size]).matches;		});	};		currentSize = DDK.screenSize();	$window = $(window);		$document = $(document);		range = _.range(1, 13);		viewportHeight = function () {		var $clear = $(".page-title").add(".block-clear");				return $window.height()			- 45 // top bar			- 5 // match .block margin-left -- todo: make this detect the margin size!			- $clear.totalHeight(); // .page-title and .block-clear element heights	};		ruleHeights = function () {		var vh = viewportHeight() - ($window.width() > 1024 ? 5 : 0);				return _.map(range, function (value) {			return Math.round(vh * value / 12 - 10); // the (- 10) accounts for block margin-top -- todo: make this detect the margin size!		});	};		addRules = function (heights) {		var largeSheet;		// allows 5px extra margin at the bottom for a cleaner look on large screens		// block height rules		_.each(sizes, function (size) {			var sheet = sheets[size];			_.each(heights, function (value, index) {				sheet.insertRule(".block." + size + "-height-" + (index + 1) + " { height: " + value + "px; }", sheet.cssRules.length);			});		});				// full row width rule (large screens and above only)		largeSheet = sheets.large;		// match .block margin-left + margin-right -- todo: make this detect the margin size!		largeSheet.insertRule(".row.full { max-width: " + ($window.width() - 10) + "px; }", largeSheet.cssRules.length);	};		deleteRules = function () {		_.each(sizes, function (size) {			var sheet = sheets[size];						while (sheet.cssRules.length) {				sheet.deleteRule(0);			}		});	};		addRules(ruleHeights());		// window resize handler	$window.on("resize", _.debounce(function () {		var oldSize, newSize;				// update stylesheet rules		deleteRules();		addRules(ruleHeights());				oldSize = currentSize;		newSize = DDK.screenSize();				// save new screen size		currentSize = newSize;				// exit if there is no change		if (oldSize === newSize) {			return;		}				// screen size change event		$document.trigger("screenchange", [newSize]);		// size-based screen size change event		$document.trigger("screenchange." + newSize);				if (_.indexOf(sizes, newSize) >= 2 && _.indexOf(sizes, oldSize) <= 1) {			// top menu enabled event			$document.trigger("menuchange", ["top"]);			$document.trigger("menuchange.top");		} else if (_.indexOf(sizes, newSize) <= 1 && _.indexOf(sizes, oldSize) >= 2) {			// side menu enabled event			$document.trigger("menuchange", ["side"]);			$document.trigger("menuchange.side");		}	}, 100));		// screenchange logging	$document.on("screenchange", function (e, size) {		DDK.info("DDK Screenchange Event:", size);	});		// screenchange logging	$document.on("menuchange", function (e, type) {		DDK.info("DDK Menuchange Event:", type);	});};		