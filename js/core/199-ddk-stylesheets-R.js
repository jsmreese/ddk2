DDK.initStylesheets = function () {	var $window, range, sizes, viewportHeight, ruleHeights, addRules;	DDK.stylesheets = {		small: $.createStylesheet("only screen"),		medium: $.createStylesheet("only screen and (min-width: 40.063em)"),		large: $.createStylesheet("only screen and (min-width: 64.063em)")	};	$window = $(window);		range = _.range(1, 13);		sizes = "small medium large".split(" ");		viewportHeight = function () {		var $clear = $(".page-title").add(".block-clear");				return $window.height()			- 45 // top bar			- 5 // match .block margin-left -- todo: make this detect the margin size!			- $clear.totalHeight(); // .page-title and .block-clear element heights	};		ruleHeights = function () {		var vh = viewportHeight() - ($window.width() > 1024 ? 5 : 0);				return _.map(range, function (value) {			return Math.round(vh * value / 12 - 10); // the (- 10) accounts for block margin-top -- todo: make this detect the margin size!		});	};		addRules = function (heights) {		var largeSheet;		// allows 5px extra margin at the bottom for a cleaner look on large screens		// block height rules		_.each(sizes, function (size) {			var sheet = DDK.stylesheets[size];			_.each(heights, function (value, index) {				sheet.insertRule(".block." + size + "-height-" + (index + 1) + " { height: " + value + "px; }", sheet.cssRules.length);			});		});				// full row width rule (large screens only)		largeSheet = DDK.stylesheets.large;		// match .block margin-left + margin-right -- todo: make this detect the margin size!		largeSheet.insertRule(".row.full { max-width: " + ($window.width() - 10) + "px; }", largeSheet.cssRules.length);	};		deleteRules = function () {		_.each(sizes, function (size) {			var sheet = DDK.stylesheets[size];						while (sheet.cssRules.length) {				sheet.deleteRule(0);			}		});	};		addRules(ruleHeights());		// update rules on window resize	$window.on("resize", _.debounce(function () {		deleteRules();		addRules(ruleHeights());	}, 200));};		